// Code generated by openapi-generator; DO NOT EDIT.
{{>partial_header}}
package {{packageName}}

import (
	"net/http"
	"strings"
	"fmt"
	"github.com/gin-gonic/gin"
	"gitlab.infinacle.com/infini-reward/go-model/v2/auth"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

{{#authMethods}}
{{#isBasicBearer}}
// {{name}} authentication
// func {{name}} (c *gin.Context) (*Principal, error) {
//	bearer := c.GetHeader("Authorization")
//
//	encrypted, err := auth.NewEncryptedBearer(bearer)
//	if err != nil {
//		return nil, err
//	}
//
//	return encrypted.ValidateRemote()
//}

func bearerAuthHandler (c *gin.Context) (*Principal, error) {
	// BasicBearer
	principal, err := {{name}}(c)
	if err != nil {
		// Not authorized
		c.JSON(http.StatusUnauthorized, gin.H{
			"code": 401,
			"message": err.Error(),
		})
		return nil, err
	}
	
	return principal, err
}

{{/isBasicBearer}}

{{#isApiKey}}
// func {{name}} (c *gin.Context) (*Principal, error) {
//	apiKey, err := auth.NewApiKey(c.GetHeader("X-API-KEY"))
//	if err != nil {
//		return nil, err
//	}
//	{{^vendorExtensions.x-validate-local}}return apiKey.ValidateRemote(){{/vendorExtensions.x-validate-local}}
//	{{#vendorExtensions.x-validate-local}}return apiKey.Validate(){{/vendorExtensions.x-validate-local}}
//}
{{/isApiKey}}

{{/authMethods}}

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
// {{operationId}}Api API handler for {{operationId}}
type {{operationId}}Api struct {
	{{#bodyParam}}
	// Body Params
	body *{{dataType}}{{/bodyParam}}
	{{#pathParams}}
	// Path Params 
	{{paramName}} {{#isNullable}}*{{/isNullable}}{{dataType}} {{#description}}// {{{description}}} {{/description}}
	{{/pathParams}}
	{{#queryParams}}
	// Query Params
	{{paramName}} {{#isNullable}}*{{/isNullable}}{{dataType}} {{#description}}// {{{description}}} {{/description}}
	{{/queryParams}}
	{{#authMethods}}
	Principal *Principal // Principal
	{{#isBasicBearer}}
	{{/isBasicBearer}}
	{{/authMethods}}
}

// {{operationId}}Handler for {{operationId}} {{httpMethod}} {{{path}}} {{#description}}
// {{{description}}}{{/description}}
//go:generate go-codegen restapi-handler -name {{operationId}} -method {{httpMethod}} -path {{{path}}} {{#description}}-desc "{{{description}}}"{{/description}}
func {{operationId}}Handler (c *gin.Context) {

	var err error

	// API context
	api := &{{operationId}}Api{}

	{{#authMethods}}
	{{#isBasicBearer}}
	// BasicBearer
	api.Principal, err = bearerAuthHandler(c)
	if err != nil {
		return
	}
	{{/isBasicBearer}}

	{{#isApiKey}}
	principal, err := {{name}}(c)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{
			"code": 401,
			"message": err.Error(),
		})
		return
	}
	api.Principal = principal
	{{/isApiKey}}
	{{/authMethods}}

	// path params
	{{#pathParams}}
	{{#isString}}{{>partial_param_string}}{{/isString}}
	{{/pathParams}}

	// query params
	{{#queryParams}}
	{{#isString}}{{>partial_param_string}}{{/isString}}
	{{#required}}

	{{/required}}
	{{^required}}

	{{/required}}
	{{/queryParams}}

	{{#bodyParam}}
	{{#required}}
	// Body is required
	api.body = &{{dataType}}{}
	if err := c.ShouldBind(api.body); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"code": 400,
			"message": err.Error(),
		})
		return
	}
	{{^isPrimitiveType}}
	errs := api.body.Validates()
	if errs.HasError() {
		c.JSON(http.StatusBadRequest, gin.H{
			"code": 400,
			"message": errs.Error(),
		})
		return
	}
	{{/isPrimitiveType}}
	{{/required}}
	{{^required}}
	// Body is optional
	{{/required}}
	{{/bodyParam}}

	// Handle the request
	c.JSON(api.Handle(c))
}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

var routes = Routes{
	{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
	{
		"{{operationId}}",
		http.Method{{httpMethod}},
		"{{{basePathWithoutHost}}}{{{path}}}",
		{{operationId}}Handler,
	},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}
