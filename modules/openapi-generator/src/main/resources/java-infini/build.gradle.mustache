plugins {
    id 'idea'
    id 'eclipse'
    id 'java'
    id 'java-library'
    id "com.jfrog.artifactory" version "4.11.0"
    id "maven-publish"
    id "org.sonarqube" version "2.7"
}

group = '{{groupId}}'
version = '{{artifactVersion}}'

//buildscript {
//    repositories {
//        mavenCentral()
//        jcenter()
//    }
//    dependencies {
//        classpath 'com.android.tools.build:gradle:2.3.+'
//        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
//    }
//}

repositories {
    mavenCentral()
    jcenter()
}

if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 25
        buildToolsVersion '25.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 25
        }

        compileOptions {
            {{#supportJava6}}
            sourceCompatibility JavaVersion.VERSION_1_6
            targetCompatibility JavaVersion.VERSION_1_6
            {{/supportJava6}}
            {{^supportJava6}}
            {{#java8}}
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
            {{/java8}}
            {{^java8}}
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
            {{/java8}}
            {{/supportJava6}}
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided 'javax.annotation:jsr250-api:1.0'
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives sourcesJar
    }

} else {

    apply plugin: 'java'

    {{#supportJava6}}
    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6
    {{/supportJava6}}
    {{^supportJava6}}
    {{#java8}}
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    {{/java8}}
    {{^java8}}
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
    {{/java8}}
    {{/supportJava6}}

    install {
        repositories.mavenInstaller {
            pom.artifactId = '{{artifactId}}'
        }
    }

    task execute(type:JavaExec) {
       main = System.getProperty('mainClass')
       classpath = sourceSets.main.runtimeClasspath
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

ext {
    swagger_annotations_version = "1.5.22"
    jackson_version = "2.9.10"
    jackson_databind_version = "2.9.10.1"
    jackson_databind_nullable_version = "0.2.0"
    jersey_version = "1.19.4"
    jodatime_version = "2.9.9"
    junit_version = "4.12"
}

dependencies {
    api "io.swagger:swagger-annotations:$swagger_annotations_version"
    api "com.google.code.findbugs:jsr305:3.0.2"
    api "com.sun.jersey:jersey-client:$jersey_version"
    api "com.sun.jersey.contribs:jersey-multipart:$jersey_version"
    api "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    api "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    api "com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version"
    api "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jackson_version"
    api "org.openapitools:jackson-databind-nullable:$jackson_databind_nullable_version"
    {{#joda}}
    api "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jackson_version"
    {{/joda}}
    {{#java8}}
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    {{/java8}}
    {{#threetenbp}}
    api "com.github.joschi.jackson:jackson-datatype-threetenbp:$jackson_version"
    {{/threetenbp}}
    {{^java8}}
    api "com.brsanthu:migbase64:2.2"
    {{/java8}}
    testImplementation "junit:junit:$junit_version"
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    resolve {
        repository {
            repoKey = 'libs-external'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

publishing {
	publications {
    	maven(MavenPublication) {
    		artifact("build/libs/${project.name}-${version}.jar") {
         		extension "jar"
       		}
			groupId group
     		artifactId project.name
      		version version
		}
 	}

	repositories {
    	maven {
      		credentials {
      			username "${artifactory_user}"
      			password "${artifactory_password}"
     		}
     		url "${artifactory_contextUrl}/libs-release-local"
    	}
	}
}
