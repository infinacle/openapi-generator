{{>partial_header}}
package {{packageName}}

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
// {{operationId}}Api API handler for {{operationId}}
type {{operationId}}Api struct {
	{{#bodyParam}}body *{{dataType}}{{/bodyParam}}
	{{#pathParams}}
	{{paramName}} {{#isNullable}}*{{/isNullable}}{{dataType}}
	{{/pathParams}}
}

// {{operationId}}Handler handler for {{operationId}} {{httpMethod}} {{{path}}}
// implements the following in any files:
// // Handle {{nickname}} - {{{summary}}} {{httpMethod}} {{{path}}}
// func (a *{{operationId}}Api{}) Handle(c *gin.Context) {
//     c.JSON(http.StatusOK, data)
// }
func {{operationId}}Handler (c *gin.Context) {
	// API context
	api := &{{operationId}}Api{}

	// path params
	{{#pathParams}}
	{{#isString}}{{>partial_param_string}}{{/isString}}
	{{/pathParams}}

	// query params
	{{#queryParams}}
	{{#required}}

	{{/required}}
	{{^required}}

	{{/required}}
	{{/queryParams}}

	{{#bodyParam}}
	{{#required}}
	// Body is required
	api.body = &{{dataType}}{}
	if err := c.ShouldBind(api.body); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"code": 400,
			"message": err.Error(),
		})
		return
	}
	{{^isPrimitiveType}}
	errs := api.body.Validates()
	if errs.HasError() {
		c.JSON(http.StatusBadRequest, gin.H{
			"code": 400,
			"message": errs.Error(),
		})
		return
	}
	{{/isPrimitiveType}}
	{{/required}}
	{{^required}}
	// Body is optional
	{{/required}}
	{{/bodyParam}}

	api.Handle(c)
}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

var routes = Routes{
	{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
	{
		"{{operationId}}",
		http.Method{{httpMethod}},
		"{{{basePathWithoutHost}}}{{{path}}}",
		{{operationId}}Handler,
	},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}
